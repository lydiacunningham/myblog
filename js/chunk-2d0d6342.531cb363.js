(window["webpackJsonp"]=window["webpackJsonp"]||[]).push([["chunk-2d0d6342"],{"720a":function(s,t,a){"use strict";a.r(t);var e=function(){var s=this,t=s.$createElement;s._self._c;return s._m(0)},r=[function(){var s=this,t=s.$createElement,a=s._self._c||t;return a("section",[a("h1",[s._v("Enforcing Git Commit Message Style")]),a("p",[a("img",{attrs:{src:"https://cdn-images-1.medium.com/max/800/1*iQSjyiA3zwGcshOGipSiXA.png?style=centerme",alt:""}})]),a("p",[s._v("I was working on a project that wanted commit messages in the following formats")]),a("pre",{pre:!0},[a("code",{pre:!0,attrs:{"v-pre":"",class:"language-bash"}},[s._v("feat(feature-name): message text here (AEROGEAR-Number)\nfix(feature-name): etc...\ndocs(feature-name): etc...\nbreaking(feature-name): etc...\n")])]),a("p",[s._v("This was a pain to enforce and check manually so we decided to automate the check for this. Firstly I wrote a script to check the existing branch commits and see if they match the format")]),a("pre",{pre:!0},[a("code",{pre:!0,attrs:{"v-pre":"",class:"language-bash"}},[a("span",{pre:!0,attrs:{class:"hljs-meta"}},[s._v("#!/bin/bash\n")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"hljs-function"}},[a("span",{pre:!0,attrs:{class:"hljs-title"}},[s._v("commit_message_check")])]),s._v(" (){\n      "),a("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("# Get the current branch and apply it to a variable")]),s._v("\n      currentbranch=`git branch | grep \\* | cut -d "),a("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("' '")]),s._v(" -f2`\n\n      "),a("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("# Gets the commits for the current branch and outputs to file")]),s._v("\n      git "),a("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("log")]),s._v(" "),a("span",{pre:!0,attrs:{class:"hljs-variable"}},[s._v("$currentbranch")]),s._v(" --pretty=format:"),a("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v('"%H"')]),s._v(" --not master > shafile.txt\n\n      "),a("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("# loops through the file an gets the message")]),s._v("\n      "),a("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("for")]),s._v(" i "),a("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("in")]),s._v(" `cat ./shafile.txt`;\n      "),a("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("do")]),s._v(" \n      "),a("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("# gets the git commit message based on the sha")]),s._v("\n      gitmessage=`git "),a("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("log")]),s._v(" --format=%B -n 1 "),a("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v('"'),a("span",{pre:!0,attrs:{class:"hljs-variable"}},[s._v("$i")]),s._v('"')]),s._v("`\n\n      "),a("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("####################### TEST STRINGS comment out line 13 to use #########################################")]),s._v("\n      "),a("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v('#gitmessage="feat sdasdsadsaas (AEROGEAR-asdsada)"')]),s._v("\n      "),a("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v('#gitmessage="feat(some txt): some txt (AEROGEAR-****)"')]),s._v("\n      "),a("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v('#gitmessage="docs(some txt): some txt (AEROGEAR-1234)"')]),s._v("\n      "),a("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v('#gitmessage="fix(some txt): some txt (AEROGEAR-5678)"')]),s._v("\n      "),a("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("#########################################################################################################")]),s._v("\n      \n      "),a("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("# Checks gitmessage for string feat, fix, docs and breaking, if the messagecheck var is empty if fails")]),s._v("\n      messagecheck=`"),a("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("echo")]),s._v(" "),a("span",{pre:!0,attrs:{class:"hljs-variable"}},[s._v("$gitmessage")]),s._v(" | grep -w "),a("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v('"feat\\|fix\\|docs\\|breaking"')]),s._v("`\n      "),a("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("if")]),s._v(" [ -z "),a("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v('"'),a("span",{pre:!0,attrs:{class:"hljs-variable"}},[s._v("$messagecheck")]),s._v('"')]),s._v(" ]\n      "),a("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("then")]),s._v(" \n            "),a("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("echo")]),s._v(" "),a("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v('"Your commit message must begin with one of the following"')]),s._v("\n            "),a("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("echo")]),s._v(" "),a("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v('"  feat(feature-name)"')]),s._v("\n            "),a("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("echo")]),s._v(" "),a("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v('"  fix(fix-name)"')]),s._v("\n            "),a("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("echo")]),s._v(" "),a("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v('"  docs(docs-change)"')]),s._v("\n            "),a("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("echo")]),s._v(" "),a("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v('" "')]),s._v("\n      "),a("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("fi")]),s._v("\n      "),a("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("# check the gitmessage for the Jira number")]),s._v("\n      messagecheck=`"),a("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("echo")]),s._v(" "),a("span",{pre:!0,attrs:{class:"hljs-variable"}},[s._v("$gitmessage")]),s._v(" | grep "),a("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v('"(AEROGEAR-"')]),s._v("`\n      "),a("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("if")]),s._v("  [ -z "),a("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v('"'),a("span",{pre:!0,attrs:{class:"hljs-variable"}},[s._v("$messagecheck")]),s._v('"')]),s._v(" ]\n      "),a("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("then")]),s._v(" \n            "),a("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("echo")]),s._v(" "),a("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v('"Your commit message must end with the following"')]),s._v("\n            "),a("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("echo")]),s._v(" "),a("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v('"  (AEROGEAR-****)"')]),s._v("\n            "),a("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("echo")]),s._v(" "),a("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v('"Where **** is the Jira number"')]),s._v("\n            "),a("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("echo")]),s._v(" "),a("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v('" "')]),s._v(" \n      "),a("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("fi")]),s._v("\n      messagecheck=`"),a("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("echo")]),s._v(" "),a("span",{pre:!0,attrs:{class:"hljs-variable"}},[s._v("$gitmessage")]),s._v(" | grep "),a("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v('": "')]),s._v("`\n      "),a("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("if")]),s._v("  [ -z "),a("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v('"'),a("span",{pre:!0,attrs:{class:"hljs-variable"}},[s._v("$messagecheck")]),s._v('"')]),s._v(" ]\n      "),a("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("then")]),s._v(" \n            "),a("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("echo")]),s._v(" "),a("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("\"Your commit message has a formatting error please take note of special characters '():' position and use in the example below\"")]),s._v("\n            "),a("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("echo")]),s._v(" "),a("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v('"   type(some txt): some txt (AEROGEAR-****)"')]),s._v("\n            "),a("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("echo")]),s._v(" "),a("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("\"Where 'type' is fix, feat, docs or breaking and **** is the Jira number\"")]),s._v("\n            "),a("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("echo")]),s._v(" "),a("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v('" "')]),s._v("\n      "),a("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("fi")]),s._v("\n\n      "),a("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("# All checks run at the same time by pipeing from one grep to another")]),s._v("\n      messagecheck=`"),a("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("echo")]),s._v(" "),a("span",{pre:!0,attrs:{class:"hljs-variable"}},[s._v("$gitmessage")]),s._v(" | grep -w "),a("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v('"feat\\|fix\\|docs\\|breaking"')]),s._v(" | grep "),a("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v('"(AEROGEAR-"')]),s._v(" | grep "),a("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v('": "')]),s._v("`\n\n\n\n      "),a("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("# check to see if the messagecheck var is empty")]),s._v("\n      "),a("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("if")]),s._v(" [ -z "),a("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v('"'),a("span",{pre:!0,attrs:{class:"hljs-variable"}},[s._v("$messagecheck")]),s._v('"')]),s._v(" ]\n      "),a("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("then")]),s._v("  \n            "),a("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("echo")]),s._v(" "),a("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("\"The commit message with sha: '"),a("span",{pre:!0,attrs:{class:"hljs-variable"}},[s._v("$i")]),s._v("' failed \"")]),s._v("\n            "),a("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("echo")]),s._v(" "),a("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v('"Please review the following :"')]),s._v("\n            "),a("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("echo")]),s._v(" "),a("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v('" "')]),s._v("\n            "),a("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("echo")]),s._v(" "),a("span",{pre:!0,attrs:{class:"hljs-variable"}},[s._v("$gitmessage")]),s._v("\n            "),a("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("echo")]),s._v(" "),a("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v('" "')]),s._v("\n            rm shafile.txt >/dev/null 2>&1\n            "),a("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("set")]),s._v(" -o errexit\n      "),a("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("else")]),s._v("\n            "),a("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("echo")]),s._v(" "),a("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v('"'),a("span",{pre:!0,attrs:{class:"hljs-variable"}},[s._v("$messagecheck")]),s._v('"')]),s._v("\n            "),a("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("echo")]),s._v(" "),a("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("\"'"),a("span",{pre:!0,attrs:{class:"hljs-variable"}},[s._v("$i")]),s._v("' commit message passed\"")]),s._v("\n      "),a("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("fi")]),s._v("  \n      "),a("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("done")]),s._v("\n      rm shafile.txt  >/dev/null 2>&1\n}\n\n"),a("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("# Calling the function")]),s._v("\ncommit_message_check \n")])]),a("p",[s._v("I copied the script to a script directory of the root of the project and was initially using it with Circle ci to check the commit during a build.")]),a("pre",{pre:!0},[a("code",{pre:!0,attrs:{"v-pre":"",class:"language-yml"}},[a("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("steps:")]),s._v("      \n"),a("span",{pre:!0,attrs:{class:"hljs-bullet"}},[s._v("  -")]),s._v(" "),a("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("checkout")]),s._v("      \n"),a("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("  - run:")]),s._v(" "),a("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("./scripts/commit-filter-check.sh")]),s._v("\n")])]),a("p",[s._v("It was decided that a local check would more useful, we then decided to use githooks to run the script. There is a "),a("strong",[s._v(".git/hook")]),s._v(" directory in every git project with sample git hooks.")]),a("p",[a("img",{attrs:{src:"https://cdn-images-1.medium.com/max/800/1*Nw2sU5pVk16Sq63zxtvwzQ.png?style=centerme",alt:""}})]),a("p",[s._v("Remove the "),a("strong",[s._v(".sample")]),s._v(" and the hook script becomes live in this case I used the "),a("strong",[s._v("commit-msg")]),s._v(" git hook and use it to run my script. The hook is triggered by a failure with an exit 1")]),a("pre",{pre:!0},[a("code",{pre:!0,attrs:{"v-pre":"",class:"language-bash"}},[a("span",{pre:!0,attrs:{class:"hljs-meta"}},[s._v("#!/bin/sh\n")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("# Run the script and get the return code if successful of if fails")]),s._v("\n./scripts/commit-filter-check.sh && rc=$? || rc=$?\n"),a("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("echo")]),s._v(" "),a("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("return")]),s._v(" code : "),a("span",{pre:!0,attrs:{class:"hljs-variable"}},[s._v("$rc")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("if")]),s._v(" "),a("span",{pre:!0,attrs:{class:"hljs-variable"}},[s._v("$rc")]),s._v(" == 1\n"),a("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("then")]),s._v("\n\t"),a("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("echo")]),s._v(" "),a("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v('"Script return code 1 so commit failed"')]),s._v("\n\t"),a("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("exit")]),s._v(" 1\n"),a("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("else")]),s._v("\n\t"),a("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("echo")]),s._v(" "),a("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v('"No error returned so commit successful"')]),s._v("\n"),a("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("fi")]),s._v("\n")])]),a("p",[s._v("Only issue was the "),a("strong",[s._v(".git")]),s._v(" directory never gets seen by git commit. So I needed a way to push my changes and allow others to use them. Moving commit-msg file to a "),a("strong",[s._v(".githook")]),s._v(" directory allows it to be committed. You can then add a line to the setup script of the project to create a sym link to the local "),a("strong",[s._v(".git/hooks")]),s._v(" directory")]),a("pre",{pre:!0},[a("code",{pre:!0,attrs:{"v-pre":"",class:"language-bash"}},[s._v("ln -sf $"),a("span",{pre:!0,attrs:{class:"hljs-variable"}},[s._v("$PWD")]),s._v("/.githooks/* $"),a("span",{pre:!0,attrs:{class:"hljs-variable"}},[s._v("$PWD")]),s._v("/.git/hooks/\n")])]),a("p",[s._v("Now every commit message is checked and will fail if it doesn’t match the format")])])}],n=a("2877"),l={},c=Object(n["a"])(l,e,r,!1,null,null,null);t["default"]=c.exports}}]);
//# sourceMappingURL=chunk-2d0d6342.531cb363.js.map